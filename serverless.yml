service: eks-test-stack

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  stackName: ${self:service}-${self:provider.stage}

custom:
  defaultStage: dev
  defaultRegion: ap-northeast-2
  cidrPrefix: 192.168

resources:
  Description: "AWS EKS Sample VPC Stack"
  Resources:
    MainVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock:
          Fn::Join:
            - ""
            - - ${self:custom.cidrPrefix}
              - ".0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: VPC for EKS Sample Test
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MainVPC
        InternetGatewayId: !Ref InternetGateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: Public Subnet
          - Key: Network
            Value: Public
    PrivateRouteTable01:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: Private Subnet AZ1
          - Key: Network
            Value: Private01
    PrivateRouteTable02:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: Private Subnet AZ2
          - Key: Network
            Value: Private02 
    PublicRoute:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PrivateRoute01:
      DependsOn:
        - VPCGatewayAttachment
        - NatGateway01
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable01
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway01
    PrivateRoute02:
      DependsOn:
        - VPCGatewayAttachment
        - NatGateway02
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable02
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway02
    NatGateway01:
      DependsOn: 
        - NatGatewayEIP1
        - PublicSubnet01
        - VPCGatewayAttachment
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
        SubnetId: !Ref PublicSubnet01
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-NatGatewayAZ1'
    NatGateway02:
      DependsOn: 
        - NatGatewayEIP2
        - PublicSubnet02
        - VPCGatewayAttachment
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
        SubnetId: !Ref PublicSubnet02
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-NatGatewayAZ2'
    NatGatewayEIP1:
      DependsOn:
        - VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NatGatewayEIP2:
      DependsOn:
        - VPCGatewayAttachment
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    PublicSubnet01:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 01
      Properties:
        MapPublicIpOnLaunch: true
        AvailabilityZone: ${self:provider.region}a
        CidrBlock:
          Fn::Join:
            - ""
            - - ${self:custom.cidrPrefix}
              - ".0.0/18"
        VpcId:
          Ref: MainVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PublicSubnet01"
          - Key: kubernetes.io/role/elb
            Value: "1"
    PublicSubnet02:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 02
      Properties:
        MapPublicIpOnLaunch: true
        AvailabilityZone: ${self:provider.region}b
        CidrBlock:
          Fn::Join:
            - ""
            - - ${self:custom.cidrPrefix}
              - ".64.0/18"
        VpcId:
          Ref: MainVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PublicSubnet02"
          - Key: kubernetes.io/role/elb
            Value: "1"
    PrivateSubnet01:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 03
      Properties:
        AvailabilityZone: ${self:provider.region}a
        CidrBlock:
          Fn::Join:
            - ""
            - - ${self:custom.cidrPrefix}
              - ".128.0/18"
        VpcId:
          Ref: MainVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PrivateSubnet01"
          - Key: kubernetes.io/role/internal-elb
            Value: "1"
    PrivateSubnet02:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Private Subnet 02
      Properties:
        AvailabilityZone: ${self:provider.region}b
        CidrBlock:
          Fn::Join:
            - ""
            - - ${self:custom.cidrPrefix}
              - ".192.0/18"
        VpcId:
          Ref: MainVPC
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PrivateSubnet01"
          - Key: kubernetes.io/role/internal-elb
            Value: 1
    PublicSubnet01RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet01
        RouteTableId: !Ref PublicRouteTable
    PublicSubnet02RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet02
        RouteTableId: !Ref PublicRouteTable
    PrivateSubnet01RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet01
        RouteTableId: !Ref PrivateRouteTable01
    PrivateSubnet02RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet02
        RouteTableId: !Ref PrivateRouteTable02
    ControlPlaneSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Cluster communication with worker nodes
        VpcId: !Ref MainVPC


  Outputs:
    SubnetIds:
      Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]
    SecurityGroups:
      Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]
    MainVpcId:
      Value: !Ref MainVPC
